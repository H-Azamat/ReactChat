{"version":3,"sources":["api/api.js","assets/img/userImg.svg","assets/img/Logo.svg","components/Header.jsx","components/Chat/Message.jsx","components/Chat/Messages.jsx","assets/img/send.svg","assets/img/emoji.svg","components/Chat/Footer.jsx","components/Chat/Chat.jsx","components/Chat/ChatContainer.jsx"],"names":["db","firebase","firestore","authApi","signIn","e","email","password","setIsRedirect","a","preventDefault","auth","signInWithEmailAndPassword","then","userCredential","user","emailVerified","alert","catch","error","register","username","setIsSendVerification","createUserWithEmailAndPassword","trim","updateProfile","displayName","sendEmailVerification","message","sendEmail","currentUser","logout","signOut","messagesApi","sendMessage","date","id","collection","add","key","Date","profileApi","img","setCurrentUser","photoURL","uid","doc","update","getUserProfile","userId","get","connect","state","userImg","className","src","logo","alt","to","defaultImg","Message","props","currentUserId","avatar","messages","users","updateMessages","useState","isLoader","setIsLoader","limit","setLimit","getData","filter","item","useEffect","getMessages","orderBy","limitToLast","onSnapshot","snapshot","forEach","push","data","messagesBlock","useRef","current","setTimeout","scrollTop","scrollHeight","onScroll","ref","Loading","map","elem","Footer","setMessage","isEmojiOpen","setIsEmojiOpen","day","getDate","month","getMonth","hours","getHours","minuts","getMinutes","onSubmit","onClick","width","emoji","onEmojiClick","emojiObject","type","value","placeholder","onChange","target","send","Chat","isRedirect","setUsername","onAuthStateChanged","Header","ChatContainer","setUsers","this","Component"],"mappings":"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","file":"static/js/6.69650c81.chunk.js","sourcesContent":["import firebase from \"../firebase\";\nimport 'firebase/auth';\n\nexport const db = firebase.firestore();\n\nexport const authApi = {\n\n    signIn: async (e, email, password, setIsRedirect) => {\n        e.preventDefault();\n        await firebase.auth().signInWithEmailAndPassword(email, password)\n        .then((userCredential) => {\n            const user = userCredential.user;\n            if(user && user.emailVerified){setIsRedirect(true)}\n            else{alert(\"Не верные данные или аккаунт не подтвержден\")}\n        })\n        .catch((error) => {\n          alert(\"Не верные данные или аккаунт не подтвержден\");\n        });\n    }, \n\n    register: async (e, email, password, username, setIsSendVerification) => {\n        e.preventDefault();\n        await firebase.auth().createUserWithEmailAndPassword(email.trim(), password.trim())\n        .then((userCredential) => {\n            let user = userCredential.user;\n            user.updateProfile({\n                displayName: username\n            })\n            \n            user.sendEmailVerification().then(() => {\n                setIsSendVerification(true)\n            }).catch((error) => {\n                alert(error.message)\n            })\n        })\n        .catch((error) => {\n            alert(error.message);\n            throw error\n        });\n    },\n\n    sendEmail: async (setIsSendVerification) => {\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification()\n            .then(() => { setIsSendVerification(true) })\n            .catch((error) => { alert(error.message) })\n    },\n    \n    logout: async () => {\n        await firebase.auth().signOut();\n    }\n}\n\nexport const messagesApi = {\n    sendMessage: async (message, date, id) => {\n        if(message){\n            await db.collection('messages').add({\n                message,\n                id,\n                date,\n                key: new Date()\n            })\n        }\n    }\n}\n\nexport const profileApi = {\n    updateProfile: async (img, username, setCurrentUser) => {\n        const user = firebase.auth().currentUser;\n\n        await user.updateProfile({\n            displayName: username,\n            photoURL: img\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, true);\n        })\n\n        db.collection(\"users\").doc(user.uid).update({\n            username: username,\n            img: img\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, true);\n        })\n    },\n    getUserProfile: async (userId) => await db.collection(\"users\").doc(userId).get()\n}\n","export default __webpack_public_path__ + \"static/media/userImg.c9678b2f.svg\";","export default __webpack_public_path__ + \"static/media/Logo.812a9abb.svg\";","import { connect } from 'react-redux';\nimport logo from '../assets/img/Logo.svg';\nimport { authApi } from '../api/api';\nimport defaultImg from '../assets/img/userImg.svg';\nimport {NavLink} from 'react-router-dom';\n\nconst Header = ({username, userImg}) => {\n    return(\n        <div className=\"header\"> \n            <img src={logo} alt=\"ReactChat\" className=\"header-logo\" />\n\n            <div className=\"header-info\">\n                <NavLink to='/profile' className=\"header-toProfile\">\n                    <span className=\"header-username\">{username}</span>\n                    <img src={userImg ? userImg : defaultImg} alt=\"imgProfile\" className=\"header-img\"/>\n                </NavLink>\n                {/*<button className=\"header-logout\" onClick={() => { authApi.logout() }}>Выйти</button>*/}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    username: state.currentUser.username,\n    userImg: state.currentUser.userImg\n})\n\nexport default connect(mapStateToProps)(Header);","import { NavLink } from \"react-router-dom\";\nimport defaultImg from '../../assets/img/userImg.svg';\n\nconst Message = (props) => {\n    return(\n        <div className={`chat-message__block ${props.currentUserId === props.userId ? 'my-message__block' : ''}`}>\n            <img src={props.avatar || defaultImg} alt=\"avatar\" className=\"message-avatar\"/>\n            <div className={`chat-message ${props.currentUserId === props.userId ? 'my-message' : ''}`}>\n                {props.currentUserId !== props.userId && <NavLink to={'/profile/' + props.userId} className=\"chat-message-username\">{props.username}</NavLink>}\n                <p className=\"chat-message-text\">{props.message}</p>\n                <span className=\"chat-message-date\">{props.date}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Message;","import { useEffect, useRef, useState } from \"react\";\nimport { connect } from 'react-redux';\nimport Loading from \"../common/Loading/Loading\";\nimport Message from \"./Message\";\nimport { updateMessages } from \"../../redux/store\";\nimport firebase from \"../../firebase\";\n\nexport const db = firebase.firestore();\n\nconst Messages = (props) => {\n \n    let [isLoader, setIsLoader] = useState(true);\n    let [limit, setLimit] = useState(15);\n\n    const getData = (id) => props.users.filter(item => item.userId === id)[0]\n\n\n    useEffect(() => {\n        const getMessages = db.collection(\"messages\").orderBy(\"key\", \"asc\").limitToLast(limit).onSnapshot((snapshot) => {\n            let messages = [];\n            snapshot.forEach(doc => messages.push({\n                userId: doc.data().id,\n                message: doc.data().message,\n                avatar: doc.data().avatar,\n                username: doc.data().username,\n                date: doc.data().date,\n                key: doc.data().key\n            }));\n            props.updateMessages(messages);\n            setIsLoader(false);\n        })\n\n        return() => {\n            getMessages();\n        }\n    }, [limit])\n\n    const messagesBlock = useRef(null);\n    if(messagesBlock.current && limit === 15){\n        setTimeout(() => {\n            messagesBlock.current.scrollTop = messagesBlock.current.scrollHeight;\n        }, 1)\n    }\n\n    const isScrollTop = () => {\n        if(messagesBlock.current.scrollTop === 0){\n            setLimit(limit + 15)\n        }\n    }\n    return(\n        <div onScroll={() => {isScrollTop()}} className=\"chat-messages\" ref={messagesBlock}>\n            {isLoader \n                ? <Loading />\n                :<div>\n                    {props.messages.map((elem) => <Message key={elem.key} userId={elem.userId} avatar={getData(elem.userId).img} message={elem.message} username={getData(elem.userId).username} currentUserId={props.id} date={elem.date} />)}\n                </div>\n            }\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n      messages: state.messages,\n      users: state.users,\n      id: state.currentUser.uid,\n})\n\nexport default connect(mapStateToProps, {updateMessages})(Messages);","export default __webpack_public_path__ + \"static/media/send.a5a3638c.svg\";","export default __webpack_public_path__ + \"static/media/emoji.c9daaafd.svg\";","import { useState } from 'react';\nimport { messagesApi } from '../../api/api';\nimport Picker from 'emoji-picker-react';\n\nimport send from '../../assets/img/send.svg';\nimport emoji from '../../assets/img/emoji.svg';\n\nconst Footer = ({id}) => {\n\n    let [message, setMessage] = useState('');\n    let [isEmojiOpen, setIsEmojiOpen] = useState(false);\n\n    const openEmoji = () => setIsEmojiOpen(!isEmojiOpen);\n\n    const onEmojiClick = (e, emojiObject) => {\n        setMessage(message + emojiObject.emoji);\n    }\n\n    const sendMessage = async (e) => {\n        e.preventDefault()\n        await messagesApi.sendMessage(message, date(), setMessage, id)\n    };\n\n    const date = () => {\n        let date = new Date();\n        let day = date.getDate();\n        let month = date.getMonth() + 1;\n        let hours = date.getHours();\n        let minuts = date.getMinutes();\n\n        switch(month) {\n            case 1: month = 'Январь'; break;\n            case 2: month = 'Февраль'; break;\n            case 3: month = 'Март'; break;\n            case 4: month = 'Апрель'; break;\n            case 5: month = 'Май'; break;\n            case 6: month = 'Июль'; break;\n            case 7: month = 'Июнь'; break;\n            case 8: month = 'Август'; break;\n            case 9: month = 'Сентябрь'; break;\n            case 10: month = 'Октябрь'; break;\n            case 11: month = 'Ноябрь'; break;\n            case 12: month = 'Декабрь'; break;\n            default: return '';\n        }\n\n        return day + ' ' + month + ' ' + hours + ':' + minuts;\n    }\n\n    return(\n        <form className=\"formSending\" onSubmit={(e) => sendMessage(e)}>\n            <div className=\"formSending-emoji\">\n                <div onClick={openEmoji} className=\"formSending-emoji-open\">\n                    <img width=\"28\" src={emoji} alt=\"emoji\"/>\n                </div>\n                {isEmojiOpen && <div className=\"formSending-emoji-modal\">\n                    <Picker onEmojiClick={onEmojiClick} />\n                </div>}\n            </div>\n            <input type=\"text\" value={message} className=\"formSending-field\" placeholder=\"Введите сообщение\" onChange={(e) => {setMessage(e.target.value)}} />\n            <button className=\"formSending-submit\">\n                <img src={send} alt=\"submit\" className=\"formSending-submit__img\" />\n            </button>\n        </form>\n    )\n}\n\nexport default Footer;","import { useEffect, useState } from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport firebase from \"../../firebase\";\nimport 'firebase/auth';\nimport Header from '../Header';\nimport Messages from './Messages';\nimport Footer from './Footer';\n\nconst Chat = (props) => {\n\n    let [isRedirect, setIsRedirect] = useState(false);\n    let [username, setUsername] = useState('');\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged( (user) => {\n            if(user && user.emailVerified){\n                setIsRedirect(false)\n                setUsername(user.displayName);\n            }else{\n                setIsRedirect(true);\n            } \n            \n        });\n    }, [])\n\n    if(isRedirect) return <Redirect to=\"login\"/>\n\n    return(\n        <div className=\"chat\">\n            <Header />\n            <Messages />\n            <Footer id={props.id} />\n        </div>\n    )\n\n}\n\nexport default Chat;","import {Component} from \"react\";\nimport Chat from \"./Chat\";\nimport {db} from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {setCurrentUser, setUsers} from \"../../redux/store\";\n\nclass ChatContainer extends Component {\n\n    getMessages() {\n        db.collection(\"users\").onSnapshot((snapshot) => {\n            let users = [];\n            snapshot.forEach(doc => users.push({\n                userId: doc.data().userId,\n                img: doc.data().img,\n                username: doc.data().username\n            }));\n            this.props.setUsers(users);\n        })\n    }\n\n    componentDidMount() {\n        this.getMessages()\n    }\n\n    render() {\n        return(\n            <Chat />\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({id: state.currentUser.uid})\n\nexport default connect(mapStateToProps, {setUsers, setCurrentUser})(ChatContainer);;"],"sourceRoot":""}