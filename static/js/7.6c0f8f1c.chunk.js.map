{"version":3,"sources":["api/api.js","components/Register/Register.jsx"],"names":["db","firebase","firestore","authApi","signIn","e","email","password","setIsRedirect","a","preventDefault","auth","signInWithEmailAndPassword","then","userCredential","user","emailVerified","alert","catch","error","register","username","setIsSendVerification","createUserWithEmailAndPassword","trim","updateProfile","displayName","collection","doc","uid","set","img","description","social","github","instagram","telegram","vk","youtube","userId","sendEmailVerification","message","sendEmail","currentUser","logout","signOut","messagesApi","sendMessage","date","id","add","key","Date","profileApi","update","setCurrentUser","photoURL","getUserProfile","get","Register","useState","setUsername","setEmail","setPassword","isSendVerification","className","to","onSubmit","type","placeholder","required","pattern","title","onChange","target","value","minlength"],"mappings":"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","file":"static/js/7.6c0f8f1c.chunk.js","sourcesContent":["import firebase from \"../firebase\";\nimport 'firebase/auth';\nimport {setCurrentUser} from \"../redux/store\";\n\nexport const db = firebase.firestore();\n\nexport const authApi = {\n\n    signIn: async (e, email, password, setIsRedirect) => {\n        e.preventDefault();\n        await firebase.auth().signInWithEmailAndPassword(email, password)\n        .then((userCredential) => {\n            const user = userCredential.user;\n            if(user && user.emailVerified){setIsRedirect(true)}\n            else{alert(\"Не верные данные или аккаунт не подтвержден\")}\n        })\n        .catch((error) => {\n          alert(\"Не верные данные или аккаунт не подтвержден\");\n        });\n    }, \n\n    register: async (e, email, password, username, setIsSendVerification) => {\n        e.preventDefault();\n        await firebase.auth().createUserWithEmailAndPassword(email.trim(), password.trim())\n        .then((userCredential) => {\n            let user = userCredential.user;\n            user.updateProfile({\n                displayName: username\n            })\n\n            db.collection(\"users\").doc(user.uid).set({\n                username,\n                img: null,\n                description: \"\",\n                social: {\n                    github: null,\n                    instagram: null,\n                    telegram: null,\n                    vk: null,\n                    youtube: null\n                },\n                userId: user.uid\n            })\n            \n            user.sendEmailVerification().then(() => {\n                setIsSendVerification(true)\n            }).catch((error) => {\n                alert(error.message)\n            })\n        })\n        .catch((error) => {\n            alert(error.message);\n            throw error\n        });\n    },\n\n    sendEmail: async (setIsSendVerification) => {\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification()\n            .then(() => { setIsSendVerification(true) })\n            .catch((error) => { alert(error.message) })\n    },\n    \n    logout: async () => {\n        await firebase.auth().signOut();\n    }\n}\n\nexport const messagesApi = {\n    sendMessage: async (message, date, id) => {\n        if(message){\n            await db.collection('messages').add({\n                message,\n                id,\n                date,\n                key: new Date()\n            })\n        }\n    }\n}\n\nexport const profileApi = {\n    updateProfile: async (img, username, description, social) => {\n        const user = firebase.auth().currentUser;\n\n        await db.collection(\"users\").doc(user.uid).update({\n            username,\n            img,\n            description,\n            social\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, description, true);\n        })\n\n        await user.updateProfile({\n            displayName: username,\n            photoURL: img,\n            description\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, description, true);\n        })\n    },\n    getUserProfile: async (userId) => await db.collection(\"users\").doc(userId).get()\n}\n","import { NavLink } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { authApi } from \"../../api/api\";\n\nconst Register = () => {\n\n    let [username, setUsername] = useState(\"\");\n    let [email, setEmail] = useState(\"\");\n    let [password, setPassword] = useState(\"\");     \n    let [isSendVerification, setIsSendVerification] = useState(false);\n\n    return(\n        <div className=\"form-block\">\n        { !isSendVerification \n            ? <form className=\"form\" onSubmit={ (e) => {authApi.register(e, email, password, username, setIsSendVerification)} } >\n                <h3 className=\"form-title\">Регистрация</h3>\n                <input\n                    type=\"text\" placeholder=\"Имя пользователя\"\n                    className=\"form-field\" required={true}\n                    pattern='[A-Za-z0-9]{1,15}' title='Макимальная длина 15 символов, не подерживаются спец символы'\n                    onChange={ (e) => {setUsername(e.target.value)} }\n                />\n\n                <input type=\"email\" placeholder=\"Email\"\n                       className=\"form-field\" required={true}\n                       onChange={ (e) => {setEmail(e.target.value)} }\n                />\n\n                <input type=\"password\" placeholder=\"Password\"\n                       className=\"form-field\" required={true} minlength=\"8\"\n                       title={'Минимальная длина пароля 8 символов'}\n                       onChange={ (e) => {setPassword(e.target.value)} }\n                />\n                <button className=\"form-send\">Зарегистрироваться</button>\n                <p className=\"form-text\">\n                    Уже есть аккаунт?<br />\n                    <NavLink to=\"/login\" className=\"form-text link\">Войти</NavLink>\n                </p>\n            </form>\n            : <div>\n                <NavLink to=\"/\" className=\"send-back\">назад &gt;</NavLink>\n                <p className=\"send-text\">\n                    Письмо отправлено на ваш email <span>{email}</span><br />\n                    Нажмите на ссылку в письме <br />\n                    *проверьте и спам\n                </p>\n            </div>\n        }\n        </div>\n    )\n}\n\nexport default Register;"],"sourceRoot":""}