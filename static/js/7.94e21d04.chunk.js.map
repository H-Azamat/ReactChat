{"version":3,"sources":["api/api.js","assets/img/userImg.svg","assets/img/Logo.svg","components/Header.jsx","assets/img/close.svg","assets/img/check.svg","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["db","firebase","firestore","authApi","signIn","e","email","password","setIsRedirect","a","preventDefault","auth","signInWithEmailAndPassword","then","userCredential","user","emailVerified","alert","catch","error","register","username","setIsSendVerification","createUserWithEmailAndPassword","trim","updateProfile","displayName","sendEmailVerification","message","sendEmail","currentUser","logout","signOut","messagesApi","sendMessage","date","id","collection","add","key","Date","profileApi","img","setCurrentUser","photoURL","uid","doc","update","getUserProfile","userId","get","connect","state","userImg","className","src","logo","alt","to","defaultImg","Profile","props","useState","setUsername","setImg","fileValue","setFileValue","useEffect","isFound","Header","close","isCurrent","check","onClick","type","value","onChange","target","readOnly","ProfileContainer","refreshProfile","match","params","data","res","setState","isLoading","isRedirect","this","prevProps","prevState","Loading","Component","compose","store","withRouter"],"mappings":"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","file":"static/js/7.94e21d04.chunk.js","sourcesContent":["import firebase from \"../firebase\";\nimport 'firebase/auth';\n\nexport const db = firebase.firestore();\n\nexport const authApi = {\n\n    signIn: async (e, email, password, setIsRedirect) => {\n        e.preventDefault();\n        await firebase.auth().signInWithEmailAndPassword(email, password)\n        .then((userCredential) => {\n            const user = userCredential.user;\n            if(user && user.emailVerified){setIsRedirect(true)}\n            else{alert(\"Не верные данные или аккаунт не подтвержден\")}\n        })\n        .catch((error) => {\n          alert(\"Не верные данные или аккаунт не подтвержден\");\n        });\n    }, \n\n    register: async (e, email, password, username, setIsSendVerification) => {\n        e.preventDefault();\n        await firebase.auth().createUserWithEmailAndPassword(email.trim(), password.trim())\n        .then((userCredential) => {\n            let user = userCredential.user;\n            user.updateProfile({\n                displayName: username\n            })\n            \n            user.sendEmailVerification().then(() => {\n                setIsSendVerification(true)\n            }).catch((error) => {\n                alert(error.message)\n            })\n        })\n        .catch((error) => {\n            alert(error.message);\n            throw error\n        });\n    },\n\n    sendEmail: async (setIsSendVerification) => {\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification()\n            .then(() => { setIsSendVerification(true) })\n            .catch((error) => { alert(error.message) })\n    },\n    \n    logout: async () => {\n        await firebase.auth().signOut();\n    }\n}\n\nexport const messagesApi = {\n    sendMessage: async (message, date, id) => {\n        if(message){\n            await db.collection('messages').add({\n                message,\n                id,\n                date,\n                key: new Date()\n            })\n        }\n    }\n}\n\nexport const profileApi = {\n    updateProfile: async (img, username, setCurrentUser) => {\n        const user = firebase.auth().currentUser;\n\n        await user.updateProfile({\n            displayName: username,\n            photoURL: img\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, true);\n        })\n\n        db.collection(\"users\").doc(user.uid).update({\n            username: username,\n            img: img\n        }).then(() => {\n            setCurrentUser(user.uid, username, img, true);\n        })\n    },\n    getUserProfile: async (userId) => await db.collection(\"users\").doc(userId).get()\n}\n","export default __webpack_public_path__ + \"static/media/userImg.c9678b2f.svg\";","export default __webpack_public_path__ + \"static/media/Logo.812a9abb.svg\";","import { connect } from 'react-redux';\nimport logo from '../assets/img/Logo.svg';\nimport { authApi } from '../api/api';\nimport defaultImg from '../assets/img/userImg.svg';\nimport {NavLink} from 'react-router-dom';\n\nconst Header = ({username, userImg}) => {\n    return(\n        <div className=\"header\"> \n            <img src={logo} alt=\"ReactChat\" className=\"header-logo\" />\n\n            <div className=\"header-info\">\n                <NavLink to='/profile' className=\"header-toProfile\">\n                    <span className=\"header-username\">{username}</span>\n                    <img src={userImg ? userImg : defaultImg} alt=\"imgProfile\" className=\"header-img\"/>\n                </NavLink>\n                {/*<button className=\"header-logout\" onClick={() => { authApi.logout() }}>Выйти</button>*/}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    username: state.currentUser.username,\n    userImg: state.currentUser.userImg\n})\n\nexport default connect(mapStateToProps)(Header);","export default __webpack_public_path__ + \"static/media/close.9f73c1c5.svg\";","export default __webpack_public_path__ + \"static/media/check.6e53806f.svg\";","import {NavLink} from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport {Redirect} from \"react-router-dom\";\n\nimport Header from '../Header';\nimport defaultImg from '../../assets/img/userImg.svg';\nimport close from '../../assets/img/close.svg';\nimport check from '../../assets/img/check.svg';\n\nexport const Profile = (props) => {\n    const [username, setUsername] = useState(props.username);\n    const [img, setImg] = useState(props.img);\n    const [fileValue, setFileValue] = useState(null);\n\n    useEffect(() => {\n        setUsername(props.username)\n        setImg(props.img)\n    }, [props])\n    \n    return (\n        <div className='profile'>\n            {!props.isFound ?\n                <Redirect to=\"/error\" /> :\n                <div>\n                    <Header />\n                    <div className=\"profileInfo\">\n                        <div className=\"profileInfo-actions\">\n                            <NavLink to=\"/\"> <img src={close} alt=\"close\" className=\"profileInfo-close\"/> </NavLink>\n                            {props.isCurrent\n                            && <img src={check} alt=\"check\" className=\"profileInfo-check\"\n                                    onClick={() => props.updateProfile(fileValue, setFileValue, setImg, img, username)}/>\n                            }\n                        </div>\n                        {props.isCurrent\n                            ? <input className=\"profileInfo-username isCurrent\" type=\"text\" value={username}\n                                onChange={(e) => {\n                                    setUsername(e.target.value)\n                                }}/>\n                            : <input className=\"profileInfo-username\" type=\"text\" value={username} readOnly={true} />\n                        }\n                        <div className=\"profileInfo-photo__block\">\n                            <img alt=\"userImg\" className=\"profileInfo-photo\" src={img ? img : defaultImg} />\n                        </div>\n                        {props.isCurrent\n                        && <div>\n                                <p className=\"profileInfo-text\">Вставьте URL ссылку картинки:</p>\n                                <input type=\"url\" className=\"profileInfo-photo__file\" value={fileValue ? fileValue : ''}\n                                       onChange={(e) => {\n                                           setFileValue(e.target.value)\n                                       }}/>\n                            </div>\n                        }\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}","import {Component} from 'react';\nimport {profileApi} from \"../../api/api\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport { withRouter, Redirect } from 'react-router-dom'\nimport {Profile} from \"./Profile\";\nimport {setCurrentUser} from \"../../redux/store\";\nimport Loading from \"../common/Loading/Loading\";\n\nimport firebase from \"../../firebase\";\nimport 'firebase/auth';\n\nclass ProfileContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFound: true,\n            img: this.props.img,\n            username: this.props.username,\n            isLoading: true,\n            isRedirect: false,\n            isCurrent: false\n        };\n    }\n\n    refreshProfile = async () => {\n        let userId = this.props.match.params.userId;\n        if(userId){\n            const res = await profileApi.getUserProfile(userId).then(doc => doc.data())\n            if(res.userId) {\n                this.setState({\n                    img: res.img,\n                    username: res.username,\n                    isLoading: false,\n                    isCurrent: false\n                })\n            }\n        }else{\n            this.setState({\n                img: this.props.img,\n                username: this.props.username,\n                isLoading: false,\n                isCurrent: true\n            })\n        }\n    }\n\n    updateProfile = async (fileValue, setFileValue, setImg, img, username) => {\n        if(fileValue) setImg(fileValue);\n        await  profileApi.updateProfile(fileValue || img, username, this.props.setCurrentUser);\n        setFileValue('');\n    }\n\n    async componentDidMount() {\n        let user = firebase.auth().currentUser;\n        if(user && user.emailVerified){\n            this.setState({isRedirect: false})\n            await this.refreshProfile()\n        }else{\n            this.setState({isRedirect: true});\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState){\n        if(this.props.match.params.userId !== prevProps.match.params.userId || this.state.username !== prevState.username){\n            await this.refreshProfile();\n        }\n    }\n\n    render(){\n        if(this.state.isRedirect) return <Redirect to=\"/login\"/>\n        return(\n            <div>{this.state.isLoading\n                ? <Loading />\n                : <Profile\n                    img={this.state.img} username={this.state.username}\n                    updateProfile={this.updateProfile} isFound={this.state.isFound}\n                    isCurrent={this.state.isCurrent} />}</div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (store) => ({\n    username: store.currentUser.username,\n    img: store.currentUser.userImg\n})\n\nexport default compose(\n    connect(mapStateToProps, {setCurrentUser}),\n    withRouter\n)(ProfileContainer);"],"sourceRoot":""}